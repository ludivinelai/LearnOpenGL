diff --git a/CMakeLists.txt b/CMakeLists.txt
index fe0db73..371a931 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -36,7 +36,7 @@ if(APPLE)
 endif(APPLE)
 
 if(WIN32)
-  set(LIBS glfw3 opengl32 assimp freetype irrKlang)
+  set(LIBS glfw3 opengl32 assimp freetype irrKlang ${CMAKE_SOURCE_DIR}/lib/glut.lib ${CMAKE_SOURCE_DIR}/lib/glut32.lib)
   add_definitions(-D_CRT_SECURE_NO_WARNINGS)
 elseif(UNIX AND NOT APPLE)
   set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall")
@@ -96,6 +96,7 @@ set(1.getting_started
     7.2.camera_keyboard_dt
     7.3.camera_mouse_zoom
     7.4.camera_class
+    7.7.mipmap
 )
 
 set(2.lighting
@@ -179,8 +180,8 @@ set(GUEST_ARTICLES
 	8.guest/2021/1.scene/1.scene_graph
 	8.guest/2021/1.scene/2.frustum_culling
 	8.guest/2021/2.csm
-	#8.guest/2021/3.tessellation/terrain_gpu_dist
-	#8.guest/2021/3.tessellation/terrain_cpu_src
+	8.guest/2021/3.tessellation/terrain_gpu_dist
+	8.guest/2021/3.tessellation/terrain_cpu_src
 	8.guest/2021/4.dsa
 	8.guest/2022/5.computeshader_helloworld
 	8.guest/2022/6.physically_based_bloom
diff --git a/src/1.getting_started/2.1.hello_triangle/hello_triangle.cpp b/src/1.getting_started/2.1.hello_triangle/hello_triangle.cpp
index b54abf2..a2ee60a 100644
--- a/src/1.getting_started/2.1.hello_triangle/hello_triangle.cpp
+++ b/src/1.getting_started/2.1.hello_triangle/hello_triangle.cpp
@@ -30,7 +30,7 @@ int main()
     glfwInit();
     glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
     glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
-    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
+    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_COMPAT_PROFILE);
 
 #ifdef __APPLE__
     glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
@@ -100,10 +100,32 @@ int main()
     // set up vertex data (and buffer(s)) and configure vertex attributes
     // ------------------------------------------------------------------
     float vertices[] = {
-        -0.5f, -0.5f, 0.0f, // left  
-         0.5f, -0.5f, 0.0f, // right 
-         0.0f,  0.5f, 0.0f  // top   
-    }; 
+        -0.5f, -0.25f, 0.0f, 
+        -0.25f, 0.25f, 0.0f,  // bottom right
+         0.0f, -0.25f, 0.0f,  // bottom left
+        -0.25f, 0.25f, 0.0f,  // bottom right
+         0.25f, 0.25f, 0.0f,   // top left 
+         0.0f, -0.25f, 0.0f,  // bottom left
+         0.0f, -0.25f, 0.0f,  // bottom left
+         0.25f, 0.25f, 0.0f,   // top left 
+         0.5f, -0.25f, 0.0f
+    };
+
+    float color[] = {
+        1.0f, 0.0f, 0.0f,
+        1.0f, 0.0f, 0.0f,
+        1.0f, 0.0f, 0.0f,
+        1.0f, 0.0f, 0.0f,
+        1.0f, 0.0f, 0.0f,
+        1.0f, 0.0f, 0.0f,
+        1.0f, 0.0f, 0.0f,
+        1.0f, 0.0f, 0.0f,
+        1.0f, 0.0f, 0.0f
+    };
+
+    GLboolean edgeFlags[] = {
+        1, 1, 1, 1, 1, 1, 1, 1, 0
+    };
 
     unsigned int VBO, VAO;
     glGenVertexArrays(1, &VAO);
@@ -126,7 +148,7 @@ int main()
 
 
     // uncomment this call to draw in wireframe polygons.
-    //glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
+    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
 
     // render loop
     // -----------
@@ -142,9 +164,19 @@ int main()
         glClear(GL_COLOR_BUFFER_BIT);
 
         // draw our first triangle
+#if 0
         glUseProgram(shaderProgram);
         glBindVertexArray(VAO); // seeing as we only have a single VAO there's no need to bind it every time, but we'll do so to keep things a bit more organized
-        glDrawArrays(GL_TRIANGLES, 0, 3);
+#else
+        glColorPointer(3, GL_FLOAT, 0, color);
+        glVertexPointer(3, GL_FLOAT, 0, vertices);
+        glEdgeFlagPointer(0, edgeFlags);
+        glEnableClientState(GL_EDGE_FLAG_ARRAY);
+        glEnableClientState(GL_COLOR_ARRAY);
+        glEnableClientState(GL_VERTEX_ARRAY);
+#endif
+
+        glDrawArrays(GL_TRIANGLES, 0, 9);
         // glBindVertexArray(0); // no need to unbind it every time 
  
         // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
diff --git a/src/1.getting_started/2.2.hello_triangle_indexed/hello_triangle_indexed.cpp b/src/1.getting_started/2.2.hello_triangle_indexed/hello_triangle_indexed.cpp
index bb38f42..8f6ac59 100644
--- a/src/1.getting_started/2.2.hello_triangle_indexed/hello_triangle_indexed.cpp
+++ b/src/1.getting_started/2.2.hello_triangle_indexed/hello_triangle_indexed.cpp
@@ -8,7 +8,7 @@ void processInput(GLFWwindow *window);
 
 // settings
 const unsigned int SCR_WIDTH = 800;
-const unsigned int SCR_HEIGHT = 600;
+const unsigned int SCR_HEIGHT = 800;
 
 const char *vertexShaderSource = "#version 330 core\n"
     "layout (location = 0) in vec3 aPos;\n"
@@ -20,7 +20,7 @@ const char *fragmentShaderSource = "#version 330 core\n"
     "out vec4 FragColor;\n"
     "void main()\n"
     "{\n"
-    "   FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n"
+    "   FragColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n"
     "}\n\0";
 
 int main()
@@ -30,7 +30,7 @@ int main()
     glfwInit();
     glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
     glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
-    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
+    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_COMPAT_PROFILE);
 
 #ifdef __APPLE__
     glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
@@ -100,15 +100,35 @@ int main()
     // set up vertex data (and buffer(s)) and configure vertex attributes
     // ------------------------------------------------------------------
     float vertices[] = {
-         0.5f,  0.5f, 0.0f,  // top right
-         0.5f, -0.5f, 0.0f,  // bottom right
-        -0.5f, -0.5f, 0.0f,  // bottom left
-        -0.5f,  0.5f, 0.0f   // top left 
+        -0.5f, -0.25f, 0.0f,  // top right
+        -0.5f, 0.25f, 0.0f,  // bottom right
+        -0.0f, 0.25f, 0.0f,  // bottom left
+        -0.0f, -0.25f, 0.0f,   // top left 
+         0.0f, -0.25f, 0.0f,
+         0.0f, 0.25f, 0.0f,
+         0.5f, 0.25f, 0.0f,
+         0.5f, -0.25f, 0.0f
     };
     unsigned int indices[] = {  // note that we start from 0!
-        0, 1, 3,  // first Triangle
-        1, 2, 3   // second Triangle
+        0, 1, 2,
+        1, 3, 2,
+        2, 3, 4,
     };
+    float color[] = {
+        1.0f, 0.0f, 0.0f,
+        0.0f, 1.0f, 0.0f,
+        0.0f, 0.0f, 1.0f,
+        0.0f, 0.0f, 0.0f,
+        1.0f, 1.0f, 0.0f,
+        1.0f, 0.0f, 1.0f,
+        0.0f, 1.0f, 1.0f,
+        1.0f, 1.0f, 1.0f,
+        1.0f, 0.0f, 0.0f
+    };
+    GLboolean edgeFlags[] = {
+        1, 1, 0, 0, 1, 1
+    };
+
     unsigned int VBO, VAO, EBO;
     glGenVertexArrays(1, &VAO);
     glGenBuffers(1, &VBO);
@@ -151,12 +171,28 @@ int main()
         // ------
         glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
         glClear(GL_COLOR_BUFFER_BIT);
-
+#if 0
         // draw our first triangle
         glUseProgram(shaderProgram);
         glBindVertexArray(VAO); // seeing as we only have a single VAO there's no need to bind it every time, but we'll do so to keep things a bit more organized
         //glDrawArrays(GL_TRIANGLES, 0, 6);
-        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
+        glEdgeFlagPointer(0, edgeFlags);
+        glEnableClientState(GL_EDGE_FLAG_ARRAY);
+        glLineWidth(3);
+        // glDrawElements(GL_TRIANGLES, 12, GL_UNSIGNED_INT, 0);
+        glDrawArrays(GL_POLYGON, 0, 6);
+#else
+        glLineWidth(2);
+        glColorPointer(3, GL_FLOAT, 0, color);
+        glVertexPointer(3, GL_FLOAT, 0, vertices);
+        // glEdgeFlagPointer(0, edgeFlags);
+        glEnableClientState(GL_EDGE_FLAG_ARRAY);
+        glEnableClientState(GL_COLOR_ARRAY);
+        glEnableClientState(GL_VERTEX_ARRAY);
+        glDrawArrays(GL_QUADS, 0, 8);
+        // glDrawElements(GL_TRIANGLES, 9, GL_UNSIGNED_INT, indices);
+#endif
+
         // glBindVertexArray(0); // no need to unbind it every time 
  
         // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
diff --git a/src/1.getting_started/2.3.hello_triangle_exercise1/hello_triangle_exercise1.cpp b/src/1.getting_started/2.3.hello_triangle_exercise1/hello_triangle_exercise1.cpp
index 889ff93..16bc101 100644
--- a/src/1.getting_started/2.3.hello_triangle_exercise1/hello_triangle_exercise1.cpp
+++ b/src/1.getting_started/2.3.hello_triangle_exercise1/hello_triangle_exercise1.cpp
@@ -3,6 +3,8 @@
 
 #include <iostream>
 
+/* one vertex buffer for two triangles */
+
 void framebuffer_size_callback(GLFWwindow* window, int width, int height);
 void processInput(GLFWwindow *window);
 
diff --git a/src/1.getting_started/2.4.hello_triangle_exercise2/hello_triangle_exercise2.cpp b/src/1.getting_started/2.4.hello_triangle_exercise2/hello_triangle_exercise2.cpp
index ba07656..42f241b 100644
--- a/src/1.getting_started/2.4.hello_triangle_exercise2/hello_triangle_exercise2.cpp
+++ b/src/1.getting_started/2.4.hello_triangle_exercise2/hello_triangle_exercise2.cpp
@@ -3,6 +3,8 @@
 
 #include <iostream>
 
+/* two vertex buffers for two triangles seperately */
+
 void framebuffer_size_callback(GLFWwindow* window, int width, int height);
 void processInput(GLFWwindow *window);
 
diff --git a/src/1.getting_started/3.3.shaders_class/3.3.shader.fs b/src/1.getting_started/3.3.shaders_class/3.3.shader.fs
index bde012b..3489ac2 100644
--- a/src/1.getting_started/3.3.shaders_class/3.3.shader.fs
+++ b/src/1.getting_started/3.3.shaders_class/3.3.shader.fs
@@ -1,7 +1,7 @@
 #version 330 core
 out vec4 FragColor;
 
-in vec3 ourColor;
+flat in vec3 ourColor;
 
 void main()
 {
diff --git a/src/1.getting_started/3.3.shaders_class/3.3.shader.vs b/src/1.getting_started/3.3.shaders_class/3.3.shader.vs
index feb3bfc..a63ecea 100644
--- a/src/1.getting_started/3.3.shaders_class/3.3.shader.vs
+++ b/src/1.getting_started/3.3.shaders_class/3.3.shader.vs
@@ -2,7 +2,7 @@
 layout (location = 0) in vec3 aPos;
 layout (location = 1) in vec3 aColor;
 
-out vec3 ourColor;
+flat out vec3 ourColor;
 
 void main()
 {
diff --git a/src/1.getting_started/3.3.shaders_class/shaders_class.cpp b/src/1.getting_started/3.3.shaders_class/shaders_class.cpp
index 1b7c827..a6c7c2d 100644
--- a/src/1.getting_started/3.3.shaders_class/shaders_class.cpp
+++ b/src/1.getting_started/3.3.shaders_class/shaders_class.cpp
@@ -5,12 +5,31 @@
 
 #include <iostream>
 
+#define USE_SHADER_FILE 0
+
 void framebuffer_size_callback(GLFWwindow* window, int width, int height);
 void processInput(GLFWwindow *window);
 
 // settings
 const unsigned int SCR_WIDTH = 800;
-const unsigned int SCR_HEIGHT = 600;
+const unsigned int SCR_HEIGHT = 800;
+
+const char *vertexShaderSource = "#version 330 core\n"
+    "layout (location = 0) in vec3 aPos;\n"
+    "layout (location = 1) in vec3 aColor;\n"
+    "flat out vec3 ourColor;\n"
+    "void main()\n"
+    "{\n"
+    "   gl_Position = vec4(aPos, 1.0);\n"
+    "   ourColor = aColor;\n"
+    "}\0";
+const char *fragmentShaderSource = "#version 330 core\n"
+    "out vec4 FragColor;\n"
+    "flat in vec3 ourColor;\n"
+    "void main()\n"
+    "{\n"
+    "   FragColor = vec4(ourColor, 1.0f);\n"
+    "}\n\0";
 
 int main()
 {
@@ -19,7 +38,7 @@ int main()
     glfwInit();
     glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
     glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
-    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
+    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_COMPAT_PROFILE);
 
 #ifdef __APPLE__
     glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
@@ -45,19 +64,65 @@ int main()
         return -1;
     }
 
+#if USE_SHADER_FILE
     // build and compile our shader program
     // ------------------------------------
     Shader ourShader("3.3.shader.vs", "3.3.shader.fs"); // you can name your shader files however you like
+#else
+    // build and compile our shader program
+    // ------------------------------------
+    // vertex shader
+    unsigned int vertexShader = glCreateShader(GL_VERTEX_SHADER);
+    glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
+    glCompileShader(vertexShader);
+    // check for shader compile errors
+    int success;
+    char infoLog[512];
+    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
+    if (!success)
+    {
+        glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
+        std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
+    }
+    // fragment shader
+    unsigned int fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
+    glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
+    glCompileShader(fragmentShader);
+    // check for shader compile errors
+    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
+    if (!success)
+    {
+        glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog);
+        std::cout << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n" << infoLog << std::endl;
+    }
+    // link shaders
+    unsigned int shaderProgram = glCreateProgram();
+    glAttachShader(shaderProgram, vertexShader);
+    glAttachShader(shaderProgram, fragmentShader);
+    glLinkProgram(shaderProgram);
+    // check for linking errors
+    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
+    if (!success) {
+        glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);
+        std::cout << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;
+    }
+    glDeleteShader(vertexShader);
+    glDeleteShader(fragmentShader);
+#endif
 
     // set up vertex data (and buffer(s)) and configure vertex attributes
     // ------------------------------------------------------------------
     float vertices[] = {
         // positions         // colors
-         0.5f, -0.5f, 0.0f,  1.0f, 0.0f, 0.0f,  // bottom right
-        -0.5f, -0.5f, 0.0f,  0.0f, 1.0f, 0.0f,  // bottom left
-         0.0f,  0.5f, 0.0f,  0.0f, 0.0f, 1.0f   // top 
+        -0.5f, -0.25f, 0.0f, 1.0f, 0.0f, 0.0f,
+        -0.5f, 0.25f, 0.0f, 0.0f, 1.0f, 0.0f,
+        -0.0f, 0.25f, 0.0f, 0.0f, 0.0f, 1.0f,
+        -0.0f, -0.25f, 0.0f, 1.0f, 1.0f, 0.0f,
+         0.0f, -0.25f, 0.0f, 1.0f, 1.0f, 0.0f,
+         0.0f, 0.25f, 0.0f, 0.0f, 0.0f, 1.0f,
+         0.5f, 0.25f, 0.0f, 0.0f, 1.0f, 1.0f,
+         0.5f, -0.25f, 0.0f, 1.0f, 0.0f, 1.0f
     };
-
     unsigned int VBO, VAO;
     glGenVertexArrays(1, &VAO);
     glGenBuffers(1, &VBO);
@@ -93,9 +158,14 @@ int main()
         glClear(GL_COLOR_BUFFER_BIT);
 
         // render the triangle
+    #if USE_SHADER_FILE
         ourShader.use();
+    #else
+        glUseProgram(shaderProgram);
+    #endif 
         glBindVertexArray(VAO);
-        glDrawArrays(GL_TRIANGLES, 0, 3);
+        // glDrawArrays(GL_TRIANGLES, 0, 3);
+        glDrawArrays(GL_QUADS, 0, 8);
 
         // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
         // -------------------------------------------------------------------------------
diff --git a/src/5.advanced_lighting/3.1.1.shadow_mapping_depth/3.1.1.debug_quad_depth.fs b/src/5.advanced_lighting/3.1.1.shadow_mapping_depth/3.1.1.debug_quad_depth.fs
index f4ff9b4..dbaab57 100644
--- a/src/5.advanced_lighting/3.1.1.shadow_mapping_depth/3.1.1.debug_quad_depth.fs
+++ b/src/5.advanced_lighting/3.1.1.shadow_mapping_depth/3.1.1.debug_quad_depth.fs
@@ -3,7 +3,7 @@ out vec4 FragColor;
 
 in vec2 TexCoords;
 
-uniform sampler2D depthMap;
+uniform sampler2DShadow depthMap;
 uniform float near_plane;
 uniform float far_plane;
 
@@ -14,9 +14,9 @@ float LinearizeDepth(float depth)
     return (2.0 * near_plane * far_plane) / (far_plane + near_plane - z * (far_plane - near_plane));	
 }
 
-void main()
+void main();
 {             
-    float depthValue = texture(depthMap, TexCoords).r;
+    float depthValue = texture(depthMap, vec3(TexCoords, 0.0));
     // FragColor = vec4(vec3(LinearizeDepth(depthValue) / far_plane), 1.0); // perspective
     FragColor = vec4(vec3(depthValue), 1.0); // orthographic
 }
\ No newline at end of file
